# This file contains the fastlane.tools configuration
# You can find the documentation at https://docs.fastlane.tools
#
# For a list of all available actions, check out
#
#     https://docs.fastlane.tools/actions
#
# For a list of all available plugins, check out
#
#     https://docs.fastlane.tools/plugins/available-plugins
#

# Uncomment the line if you want fastlane to automatically update itself
# update_fastlane

require "date"

default_platform(:ios)

platform :ios do
  desc "Run test coverage"
  lane :coverage do
    FileUtils.remove_dir "../xcov_output", true
    tests
    xcov(
      project: ENV["APP_PROJECT"],
      scheme: ENV["APP_SCHEME"],
      output_directory: "xcov_output",
      ignore_file_path: "fastlane/.xcovignore",
      exclude_targets: ENV["XCOV_EXCLUDE_TARGETS"],
    )
  end

  desc "Run tests"
  lane :tests do
    scan(
      scheme: ENV["APP_SCHEME"],
      xcargs: "-skipPackagePluginValidation -skipMacroValidation"
    )
  end

  desc "Build EUDI Wallet Demo version and upload it to AppCenter"
  lane :deploy do
    ENV["FASTLANE_XCODEBUILD_SETTINGS_TIMEOUT"] = "600"

    git_pull

    connect_api = app_store_connect_api_key(
      key_id: ENV["CONNECT_KEY_ID"],
      issuer_id: ENV["CONNECT_ISSUER_ID"],
      key_filepath: ENV["CONNECT_KEY_PATH"],
      duration: 1200,
      in_house: false,
    )

    latestBuildNumber = latest_testflight_build_number(
      api_key: connect_api,
      initial_build_number: 0,
    )

    buildNumber = build_number(versionBuildNumber: latestBuildNumber)

    fullVersion = full_version(
      buildType: ENV["APP_BUILD_TYPE"],
      buildCode: buildNumber,
    )

    minified_version(
      target: ENV["APP_TARGET"],
      configName: ENV["APP_VERSION_CONFIG"],
      fullVersion: fullVersion,
    )

    update_build_number(
      target: ENV["APP_TARGET"],
      number: buildNumber,
    )

    tagVersion = tag_name(
      buildName: fullVersion,
      buildNumber: buildNumber,
      brand: ENV["APP_TAG"],
      buildType: ENV["APP_BUILD_TYPE"],
    )

    build_app(
      scheme: ENV["APP_SCHEME"],
      include_bitcode: true,
      export_method: "app-store",
      export_options: {
        provisioningProfiles: {
          ENV["APP_BUNDLE_ID"] => ENV["APP_PROVISION_PROFILE"],
        },
      },
    )

    upload_appstore(
      connectApi: connect_api,
      binaryName: ENV["APP_IPA_PATH"],
      bundleId: ENV["APP_BUNDLE_ID"],
      distributeExternal: ENV["TESTFLIGHT_EXTERNAL_RELEASE"],
      groups: ENV["TESTFLIGHT_GROUPS"],
      changelog: ENV["TESTFLIGHT_CHANGELOG"]
    )

    clean_build_artifacts

    reset_project(
      target: ENV["APP_TARGET"],
      configName: ENV["APP_VERSION_CONFIG"],
      buildType: ENV["APP_BUILD_TYPE"],
    )

    add_git_tag(
      tag: tagVersion,
    )

    if ENV['PROD_REMOTE_REPO']
      upload_tag(
        remoteUrl: ENV['PROD_REMOTE_REPO'],
        tag: tagVersion
      )
    end

    if ENV['DEV_REMOTE_REPO']
      upload_tag(
        remoteUrl: ENV['DEV_REMOTE_REPO'],
        tag: tagVersion,
      )
    end

    if ENV['GITHUB_RELEASE_REPO'] && ENV['GITHUB_RELEASE_TOKEN']
      github_release(
        token: ENV['GITHUB_RELEASE_TOKEN'],
        repo: ENV['GITHUB_RELEASE_REPO'],
        tag: tagVersion,
        version: fullVersion
      )
    end
  
  end

  desc "Release to github"
  lane :github_release do |values|
    token = values[:token]
    repo = values[:repo]
    tag = values[:tag]
    version = values[:version]
    github_release = set_github_release(
      repository_name: repo,
      api_token: token,
      name: version,
      tag_name: tag,
      is_generate_release_notes: true
    )
  end

  desc "Upload tag to remote repo"
  lane :upload_tag do |values|
    remoteUrl = values[:remoteUrl]
    tag = values[:tag]
    sh("git remote set-url origin #{remoteUrl}")
    push_git_tags(tag: tag)
  end

  desc "Reset version and build number to default"
  lane :upload_appstore do |values|
    connectApi = values[:connectApi]
    binaryName = values[:binaryName]
    bundleId = values[:bundleId]
    distributeExternal = values[:distributeExternal]
    groups = values[:groups]
    changelog = values[:changelog]
    pilot(
      app_identifier: bundleId,
      api_key: connectApi,
      ipa: binaryName,
      changelog: changelog,
      skip_submission: false,
      skip_waiting_for_build_processing: true,
      distribute_external: distributeExternal == "true",
      groups: groups&.split(',')&.map(&:strip)
    )
  end

  desc "Reset default project settings"
  lane :reset_project do |values|
    target = values[:target]
    configName = values[:configName]
    buildType = values[:buildType]
    update_build_number(
      target: target,
      number: 1,
    )
    update_version(
      target: target,
      configName: configName,
      version: "yyyy.mm.v",
    )
  end

  desc "Set build number"
  lane :update_build_number do |values|
    target = values[:target]
    number = values[:number]
    increment_build_number_in_plist(
      target: target,
      build_number: number.to_s,
    )
    increment_build_number_in_xcodeproj(
      target: target,
      build_number: number.to_s,
    )
  end

  desc "Set version"
  lane :update_version do |values|
    target = values[:target]
    configName = values[:configName]
    version = values[:version]
    increment_version_number_in_xcodeproj(
      target: target,
      version_number: version,
      build_configuration_name: configName,
    )
  end

  desc "Build Number"
  lane :build_number do |values|
    number = values[:versionBuildNumber].to_i + 1
    puts "Build Number: #{number}"
    number
  end

  desc "Build Tag Name"
  lane :tag_name do |values|
    buildName = values[:buildName]
    buildNumber = values[:buildNumber]
    brand = values[:brand]
    buildType = values[:buildType]
    name = "#{brand}/#{buildType}_#{buildName}_Build=#{buildNumber}"
    puts "Tag Name: #{name}"
    name
  end

  desc "Build Version"
  lane :full_version do |values|
    buildType = values[:buildType]
    buildCode = values[:buildCode]
    date = DateTime.now
    version = "#{date.strftime("%Y.%m")}.#{buildCode}-#{buildType}"
    puts "Generated Calver: #{version}"
    version
  end

  desc "Appstore Build Version"
  lane :minified_version do |values|
    target = values[:target]
    configName = values[:configName]
    fullVersion = values[:fullVersion]
    version = fullVersion.split("-").first
    puts "Minified Version For Appstore: #{version}"
    update_version(
      target: target,
      configName: configName,
      version: version,
    )
  end

  desc "Change App Display Name"
  lane :update_display_name do |values|
    displayName = values[:displayName]
    xcodeproj = values[:xcodeproj]
    target = values[:target]

    puts "New display name: #{displayName} for #{target} in #{xcodeproj}"

    project = Xcodeproj::Project.open("../#{xcodeproj}")
    target = project.targets.find { |t| t.name == target }
    target.build_configurations.each do |config|
      config.build_settings["INFOPLIST_KEY_CFBundleDisplayName"] = displayName
    end
    project.save
  end
end
